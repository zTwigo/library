/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.UIManager;
import login.Login;
import manager.FileManager;
import manager.FormsManager;
import raven.glasspanepopup.GlassPanePopup;
import user_interface.UserInterface;

/**
 *
 * @author Ernesto
 */
public class Application extends javax.swing.JFrame {

    /**
     * Creates new form Application
     */
    public Application() {
        initComponents();
        init();
        loadApplicationIcon();
    }
    
    private void init(){
        checkRoamingFolderPresence();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(new Dimension(1200,700));
        setLocationRelativeTo(null);
        checkRememberMeOption();
        FormsManager.getInstance().initApplication(this);
        GlassPanePopup.install(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        FlatLaf .registerCustomDefaultsSource("style");
        FlatMacDarkLaf.setup();
        FlatRobotoFont.install();
        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Application().setVisible(true);
        });
    }
    
    private void loadApplicationIcon(){
        // Get the image
        Image image = new ImageIcon("images/icon.png").getImage();
        
        // Set the image icon
        setIconImage(image);
    }
    
    /**
     * Every time the program starts, including the first time, a check will be
     * performed in order to determine if the roaming folder has been created.
     * 
     * This control is essential since all the data concerning the user is written, deleted
     * or modified into its AppData folder and if it didn't exist that could cause several
     * exceptions or even the crash of the program itself.
     */
    private void checkRoamingFolderPresence(){
        // Get the appData path of the user system's (in this case Windows)
        String appDataPath = System.getenv("APPDATA");
        
        // Check if the folder does exist
        if(!FileManager.isFolderPresent(appDataPath + "/zelLibrary")){
            // If the folder does not exist then create it
            FileManager.createFolder(appDataPath + "/zelLibrary");
        }
    }
    
    /**
     * This method will check if the user has reminded the program
     * to keep it logged in after its login procedure.
     * 
     * Note: this method will affect the starting point of the program:
     * - if the user has not reminded the program to keep it logged in
     * the login form will be shown;
     * - in the other case the program will instantly show the user
     * its home page.
     */
    private void checkRememberMeOption(){
        // Check if the user reminded the program to keep it logged in
        if(FileManager.checkFolderTree().equals("")){
            setTitle("Login");
            setContentPane(new Login());
        } else {
            setTitle("Home");
            try {
                setContentPane(new UserInterface(FileManager.checkFolderTree(), true));
            } catch (Exception ex) {
                Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
